/*
 * App URI: output/modifyOutput
 * Source Location: output/modifyOutput.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	var app = new cpr.core.App("output/modifyOutput", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * modifyOutput.js
			 * Created at 2022. 6. 6. 오후 2:48:59.
			 *
			 * @author PSE
			 ************************************************/
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
			
				var outputID = app.getHost().initValue.output_id;
				
				app.lookup("output_id").setValue("output_id", outputID);
				app.lookup("getOutputContent").send();
				console.log("getOutputContent 서브미션 실행");
				
			}
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onGetOutputContentSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var getOutputContent = e.control;
				
				app.lookup("productName").redraw();
				app.lookup("input_outputType").redraw();
				app.lookup("input_outputTitle").redraw();
				app.lookup("outputContent").redraw();
				
				
				
				var attachmentList = app.lookup("attachmentList");
				var i
				for(i = 0; i < attachmentList.getRowCount(); i++) {
					var fileName = attachmentList.getValue(i, "real_file_name");
					var fileSize = attachmentList.getValue(i, "file_size");
					var save_path = attachmentList.getValue(i, "save_path")
					
					app.lookup("file_upload").addFile({
							name : fileName, 
							size : fileSize, 
							properties : {svaePath : save_path}
						}, false);
					
					/*
					app.lookup("file_upload").addUploadedFile(
						{
							name : fileName, 
							size : fileSize, 
							properties : {svaePath : save_path}
						}
					);
					*/ 
				}
				
			}
			
			
			/*
			 * "수정" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Button
				 */
				var button = e.control;
				
				var attachmentList = app.lookup("attachmentList");
				var files = app.lookup("file_upload").getFiles();
				
			
				
				app.lookup("modifyOutput").send();
				console.log("modifyOutput 서브미션 실행");
				
			}
			
			
			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onModifyOutputSubmitDone(/* cpr.events.CSubmissionEvent */ e){
				/** 
				 * @type cpr.protocols.Submission
				 */
				var modifyOutput = e.control;
				
				cpr.core.App.load("output/outputContentView", function(loadedApp){
						if(loadedApp){
				    		app.getHost().app = loadedApp;
				  		}
					});
				//app.close();
				
			}
			
			
			/*
			 * 파일 업로드에서 add-file 이벤트 발생 시 호출.
			 * 파일 추가 후 발생하는 이벤트입니다.
			 */
			function onFile_uploadAddFile(/* cpr.events.CFileUploadEvent */ e){
				/** 
				 * @type cpr.controls.FileUpload
				 */
				var file_upload = e.control;
				
				console.log("추가된 파일들 : " + e.files);
				
				var files = e.files;
				var i;
				for(i = 0; i < files.length; i++){
					app.lookup("modifyOutput").addFileParameter("file" + i, files[i]);
				}
				
			}
			
			
			/*
			 * 파일 업로드에서 remove-before-file 이벤트 발생 시 호출.
			 * 파일을 삭제 하기 전에 발생하는 이벤트 입니다. event.preventDefault()를 하면 파일을 삭제하지 않습니다.
			 */
			function onFile_uploadRemoveBeforeFile(/* cpr.events.CFileUploadEvent */ e){
				/** 
				 * @type cpr.controls.FileUpload
				 */
				var file_upload = e.control;
				console.log("삭제될 파일들 : " + e.files);
				
				var files = e.files;
				var i;
				for(i = 0; i < files.length; i++){
					if(files[i].type != File){
						app.lookup("deleteFileList").addRowData(
							{
								"delete_file_name" : files[i].name
							}
						);
					}else{
						app.lookup("modifyOutput").removeFileParameters(files[i].name);
					}
					
				}
				
			
				
				
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("attachmentList");
			dataSet_1.parseData({
				"columns" : [
					{"name": "real_file_name"},
					{"name": "save_file_name"},
					{"name": "save_path"},
					{
						"name": "file_size",
						"dataType": "number"
					}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("deleteFileList");
			dataSet_2.parseData({
				"columns" : [{"name": "delete_file_name"}]
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("product");
			dataMap_1.parseData({
				"columns" : [{"name": "product_name"}]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("product_output");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "product_id",
						"dataType": "number"
					},
					{
						"name": "output_type",
						"dataType": "string"
					},
					{"name": "output_title"},
					{"name": "output_content"},
					{
						"name": "write_date",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("output_id");
			dataMap_3.parseData({
				"columns" : [{
					"name": "output_id",
					"dataType": "number"
				}]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("modifyOutput");
			submission_1.method = "put";
			submission_1.action = "/productMangement/modifyOutput";
			submission_1.mediaType = "multipart/form-data";
			submission_1.addRequestData(dataMap_3);
			submission_1.addRequestData(dataMap_2);
			submission_1.addRequestData(dataSet_2);
			if(typeof onModifyOutputSubmitDone == "function") {
				submission_1.addEventListener("submit-done", onModifyOutputSubmitDone);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("getOutputContent");
			submission_2.action = "/productMangement/getOutputContent";
			submission_2.addRequestData(dataMap_3);
			submission_2.addResponseData(dataMap_1, false);
			submission_2.addResponseData(dataMap_2, false);
			submission_2.addResponseData(dataSet_1, false);
			if(typeof onGetOutputContentSubmitDone == "function") {
				submission_2.addEventListener("submit-done", onGetOutputContentSubmitDone);
			}
			app.register(submission_2);
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 745px) and (max-width: 1023px)", "new-screen");
			app.supportMedia("all and (min-width: 500px) and (max-width: 744px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var group_2 = new cpr.controls.Container();
				// Layout
				var formLayout_1 = new cpr.controls.layouts.FormLayout();
				formLayout_1.topMargin = "0px";
				formLayout_1.rightMargin = "0px";
				formLayout_1.bottomMargin = "0px";
				formLayout_1.leftMargin = "0px";
				formLayout_1.horizontalSpacing = "0px";
				formLayout_1.verticalSpacing = "0px";
				formLayout_1.setColumns(["110px", "240px"]);
				formLayout_1.setRows(["30px"]);
				group_2.setLayout(formLayout_1);
				(function(container){
					var output_1 = new cpr.controls.Output();
					output_1.value = "산출물 종류";
					output_1.style.css({
						"text-align" : "center"
					});
					container.addChild(output_1, {
						"colIndex": 0,
						"rowIndex": 0
					});
					var inputBox_1 = new cpr.controls.InputBox("input_outputType");
					inputBox_1.bind("value").toDataMap(app.lookup("product_output"), "output_type");
					container.addChild(inputBox_1, {
						"colIndex": 1,
						"rowIndex": 0,
						"colSpan": 1,
						"rowSpan": 1
					});
				})(group_2);
				container.addChild(group_2, {
					"top": "20px",
					"left": "358px",
					"width": "357px",
					"height": "38px"
				});
				var fileUpload_1 = new cpr.controls.FileUpload("file_upload");
				fileUpload_1.buttons = ["add", "remove"];
				fileUpload_1.style.button.css({
					"background-color" : "#daf2da",
					"border-right-style" : "none",
					"border-left-style" : "none",
					"font-size" : "10pt",
					"border-bottom-style" : "none",
					"background-image" : "none",
					"border-top-style" : "none"
				});
				fileUpload_1.style.header.css({
					"background-color" : "#eaf0ea",
					"background-image" : "none"
				});
				if(typeof onFile_uploadAddFile == "function") {
					fileUpload_1.addEventListener("add-file", onFile_uploadAddFile);
				}
				if(typeof onFile_uploadRemoveFile == "function") {
					fileUpload_1.addEventListener("remove-file", onFile_uploadRemoveFile);
				}
				if(typeof onFile_uploadRemoveBeforeFile == "function") {
					fileUpload_1.addEventListener("remove-before-file", onFile_uploadRemoveBeforeFile);
				}
				container.addChild(fileUpload_1, {
					"top": "130px",
					"left": "20px",
					"width": "695px",
					"height": "202px"
				});
				var group_3 = new cpr.controls.Container();
				// Layout
				var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
				group_3.setLayout(verticalLayout_1);
				(function(container){
					var output_2 = new cpr.controls.Output();
					output_2.value = "내용";
					output_2.style.css({
						"padding-left" : "10px"
					});
					container.addChild(output_2, {
						"width": "100px",
						"height": "27px"
					});
					var textArea_1 = new cpr.controls.TextArea("outputContent");
					textArea_1.bind("value").toDataMap(app.lookup("product_output"), "output_content");
					container.addChild(textArea_1, {
						"width": "100px",
						"height": "252px"
					});
				})(group_3);
				container.addChild(group_3, {
					"top": "345px",
					"left": "20px",
					"width": "695px",
					"height": "290px"
				});
				var button_1 = new cpr.controls.Button();
				button_1.value = "수정";
				button_1.style.css({
					"border-right-style" : "none",
					"background-color" : "#DAF2DA",
					"border-radius" : "10px",
					"border-left-style" : "none",
					"border-bottom-style" : "none",
					"background-image" : "none",
					"border-top-style" : "none"
				});
				if(typeof onButtonClick == "function") {
					button_1.addEventListener("click", onButtonClick);
				}
				container.addChild(button_1, {
					"top": "645px",
					"left": "635px",
					"width": "80px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"left": "0px",
				"width": "725px",
				"height": "690px"
			});
			
			var group_4 = new cpr.controls.Container();
			// Layout
			var formLayout_2 = new cpr.controls.layouts.FormLayout();
			formLayout_2.topMargin = "0px";
			formLayout_2.rightMargin = "0px";
			formLayout_2.bottomMargin = "0px";
			formLayout_2.leftMargin = "0px";
			formLayout_2.horizontalSpacing = "0px";
			formLayout_2.verticalSpacing = "0px";
			formLayout_2.setColumns(["100px", "190px"]);
			formLayout_2.setRows(["30px"]);
			group_4.setLayout(formLayout_2);
			(function(container){
				var output_3 = new cpr.controls.Output();
				output_3.value = "제품명";
				output_3.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#b4b4b4",
					"border-right-width" : "1px",
					"border-left-color" : "#b4b4b4",
					"border-right-color" : "#b4b4b4",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#b4b4b4",
					"border-bottom-style" : "solid",
					"text-align" : "center"
				});
				container.addChild(output_3, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var output_4 = new cpr.controls.Output("productName");
				output_4.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#b4b4b4",
					"border-right-width" : "1px",
					"border-bottom-width" : "1px",
					"border-top-color" : "#b4b4b4",
					"border-bottom-style" : "solid",
					"border-right-color" : "#b4b4b4",
					"border-top-style" : "solid",
					"text-align" : "center"
				});
				output_4.bind("value").toDataMap(app.lookup("product"), "product_name");
				container.addChild(output_4, {
					"colIndex": 1,
					"rowIndex": 0
				});
			})(group_4);
			container.addChild(group_4, {
				"top": "20px",
				"left": "20px",
				"width": "297px",
				"height": "38px"
			});
			
			var group_5 = new cpr.controls.Container();
			// Layout
			var formLayout_3 = new cpr.controls.layouts.FormLayout();
			formLayout_3.topMargin = "0px";
			formLayout_3.rightMargin = "0px";
			formLayout_3.bottomMargin = "0px";
			formLayout_3.leftMargin = "0px";
			formLayout_3.horizontalSpacing = "0px";
			formLayout_3.verticalSpacing = "0px";
			formLayout_3.setColumns(["60px", "630px"]);
			formLayout_3.setRows(["30px"]);
			group_5.setLayout(formLayout_3);
			(function(container){
				var output_5 = new cpr.controls.Output();
				output_5.value = "제목";
				output_5.style.css({
					"padding-left" : "13px",
					"text-align" : "left"
				});
				container.addChild(output_5, {
					"colIndex": 0,
					"rowIndex": 0
				});
				var inputBox_2 = new cpr.controls.InputBox("input_outputTitle");
				inputBox_2.bind("value").toDataMap(app.lookup("product_output"), "output_title");
				container.addChild(inputBox_2, {
					"colIndex": 1,
					"rowIndex": 0,
					"colSpan": 1,
					"rowSpan": 1
				});
			})(group_5);
			container.addChild(group_5, {
				"top": "74px",
				"left": "20px",
				"width": "695px",
				"height": "38px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "modifyOutput";
	cpr.core.Platform.INSTANCE.register(app);
})();
