/// start - udc.alter
/*
 * UDC Qualified Name: udc.alter
 * App URI: udc/alter
 * Source Location: udc/alter.clx
 *
 * This file was generated by eXbuilder6 compiler, Don't edit manually.
 */
(function(){
	// App Declaration
	var internalApp = new cpr.core.App("udc/alter", {
		onPrepare: function(loader){
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports){
			var linker = {};
			// Start - User Script
			/************************************************
			 * alter.js
			 * Created at 2022. 5. 31. 오후 3:27:18.
			 *
			 * @author A
			 ************************************************/
			
			/**
			 * UDC 컨트롤이 그리드의 뷰 모드에서 표시할 텍스트를 반환합니다.
			 */
			exports.getText = function(){
				// TODO: 그리드의 뷰 모드에서 표시할 텍스트를 반환하는 하는 코드를 작성해야 합니다.
				return "";
			};
			
			
			
			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(/* cpr.events.CEvent */ e){
				app.lookup("text").value = app.getAppProperty("text");
				
			}
			
			
			
			
			/*
			 * "NO" 아웃풋(no)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onNoClick(/* cpr.events.CMouseEvent */ e){
				/** 
				 * @type cpr.controls.Output
				 */
				var no = e.control;
				var event = new cpr.events.CMouseEvent("click");
				app.dispatchEvent(event)
				
			};
			// End - User Script
			
			// Header
			
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (min-width: 350px) and (max-width: 499px)", "mobile");
			app.supportMedia("all and (max-width: 349px)", "alter");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"top" : "0px",
				"height" : "100%",
				"left" : "0px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			// Layout
			var formLayout_1 = new cpr.controls.layouts.FormLayout();
			formLayout_1.topMargin = "0px";
			formLayout_1.rightMargin = "0px";
			formLayout_1.bottomMargin = "0px";
			formLayout_1.leftMargin = "0px";
			formLayout_1.horizontalSpacing = "0px";
			formLayout_1.verticalSpacing = "0px";
			formLayout_1.setColumns(["1fr", "1fr"]);
			formLayout_1.setRows(["120px", "40px"]);
			group_1.setLayout(formLayout_1);
			(function(container){
				var output_1 = new cpr.controls.Output("text");
				output_1.value = "";
				output_1.style.css({
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"colIndex": 0,
					"rowIndex": 0,
					"colSpan": 2,
					"rowSpan": 1
				});
				var output_2 = new cpr.controls.Output("no");
				output_2.value = "NO";
				output_2.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#6b6b6b",
					"font-weight" : "bold",
					"border-right-width" : "1px",
					"border-left-color" : "#6b6b6b",
					"border-right-color" : "#6b6b6b",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"background-color" : "#DAF2DA",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#6b6b6b",
					"border-bottom-style" : "solid",
					"text-align" : "center"
				});
				if(typeof onNoClick == "function") {
					output_2.addEventListener("click", onNoClick);
				}
				container.addChild(output_2, {
					"colIndex": 0,
					"rowIndex": 1
				});
				var output_3 = new cpr.controls.Output("yes");
				output_3.value = "YES";
				output_3.style.css({
					"border-right-style" : "solid",
					"background-color" : "#DAF2DA",
					"border-top-width" : "1px",
					"border-bottom-color" : "#6b6b6b",
					"font-weight" : "bold",
					"border-right-width" : "1px",
					"border-bottom-width" : "1px",
					"border-top-color" : "#6b6b6b",
					"border-right-color" : "#6b6b6b",
					"border-bottom-style" : "solid",
					"border-top-style" : "solid",
					"text-align" : "center"
				});
				container.addChild(output_3, {
					"colIndex": 1,
					"rowIndex": 1
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "0px",
				"left": "0px",
				"width": "300px",
				"height": "160px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	
	// Type declaration for alter
	cpr.utils.Util.ensurePackage("udc").alter = function(id){
		cpr.controls.UDCBase.call(this, "udc.alter", internalApp, id);
	};
	
	udc.alter.prototype = Object.create(cpr.controls.UDCBase.prototype);
	Object.defineProperty(udc.alter.prototype, "type", {
		get : function(){
			return "udc.alter";
		},
		
		configurable: true
	});
	
	// App Properties
	
	// Register type into the Platform and package
	cpr.core.Platform.INSTANCE.register(internalApp);
})();
/// end - udc.alter
